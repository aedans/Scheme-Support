{
  parserClass="com.aedans.plugins.scheme.lang.parser.SchemeParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Scheme"
  psiImplClassSuffix="Impl"
  psiPackage="com.aedans.plugins.scheme.lang.psi.gen"
  psiImplPackage="com.aedans.plugins.scheme.lang.psi.gen.impl"
  psiImplUtilClass="com.aedans.plugins.scheme.lang.psi.SchemePsiImplUtil"

  elementTypeHolderClass="com.aedans.plugins.scheme.lang.lexer.SchemeTokenTypes"
  elementTypeClass="com.aedans.plugins.scheme.lang.lexer.SchemeElementType"
  tokenTypeClass="com.aedans.plugins.scheme.lang.lexer.SchemeTokenType"
}

simpleFile ::= form*

form ::= definition|expression

// Definitions
definition ::= variable_definition
             | syntax_definition
             | begin_definition
             | let_definition
             | letrec_definition

variable_definition ::= <<parenthesized (DEFINE id expression)>>
                      | <<parenthesized (DEFINE <<parenthesized (id id*)>> body)>>
                      | <<parenthesized (DEFINE <<parenthesized (id id* DOT id)>> body)>>

syntax_definition ::= <<parenthesized (DEFINE_SYNTAX id expression)>>

begin_definition ::= <<parenthesized (BEGIN definition*)>>

let_definition ::= <<parenthesized (LET_SYNTAX <<parenthesized (syntax_binding*)>> definition*)>>

letrec_definition ::= <<parenthesized (LETREC_SYNTAX <<parenthesized (syntax_binding*)>> definition*)>>

body ::= definition* expression+

syntax_binding ::= <<parenthesized (id expression)>>

// Expressions
expression ::= constant
             | id
             | quote_expression
             | lambda_expression
             | if_expression
             | set_expression
             | application
             | let_syntax_expression
             | letrec_syntax_expression
             | syntax_rules_expression
             | begin_expression
             | abbreviation

quote_expression ::= <<parenthesized (QUOTE datum)>>

lambda_expression ::= <<parenthesized (LAMBDA formals body)>>

if_expression ::= <<parenthesized (IF expression expression expression)>>
                | <<parenthesized (IF expression expression)>>

set_expression ::= SET id expression

let_syntax_expression ::= <<parenthesized (LET_SYNTAX <<parenthesized (syntax_binding*)>> expression+)>>

letrec_syntax_expression ::= <<parenthesized (LETREC_SYNTAX <<parenthesized (syntax_binding*)>> expression+)>>

syntax_rules_expression ::= <<parenthesized (SYNTAX_RULES list expression+)>>

begin_expression ::= <<parenthesized (BEGIN expression*)>>

constant ::= BOOLEAN|NUMBER|CHARACTER|STRING|nil

nil ::= <<parenthesized ()>>

formals ::= id
          | <<parenthesized (id*)>>
          | <<parenthesized (id+ DOT id)>>

application ::= <<parenthesized (expression expression*)>>

// datum
datum ::= BOOLEAN|NUMBER|CHARACTER|STRING|symbol|list|vector

symbol ::= IDENTIFIER

list ::= <<parenthesized (datum*)>>
       | <<parenthesized (datum+ DOT datum)>>
       | abbreviation

abbreviation ::= APOSTROPHE datum
               | BACKQUOTE datum
               | COMMA datum
               | COMMA_AT datum

vector ::= POUND <<parenthesized (datum*)>>

id ::= IDENTIFIER

// util

meta parenthesized ::= OPEN_PAREN <<param>> CLOSE_PAREN
            | OPEN_BRACE <<param>> CLOSE_BRACE
            | OPEN_BRACKET <<param>> CLOSE_BRACKET
