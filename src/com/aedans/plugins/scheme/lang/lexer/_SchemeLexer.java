/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.aedans.plugins.scheme.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.aedans.plugins.scheme.lang.lexer.SchemeTokenTypes;
import com.aedans.plugins.scheme.lang.parser.SchemeTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_SchemeLexer.flex</tt>
 */
class _SchemeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\61\1\44\1\47\1\50\1\44\22\0\1\42\1\41\1\55\1\14\3\57\1\7\1\1\1\2\1"+
    "\57\1\56\1\11\1\24\1\13\1\60\12\62\1\57\1\43\4\57\1\12\32\57\1\3\1\46\1\4"+
    "\2\57\1\10\1\30\1\15\1\34\1\22\1\16\1\23\1\17\1\57\1\20\1\57\1\51\1\32\1\40"+
    "\1\21\1\37\1\52\1\36\1\33\1\25\1\27\1\35\1\54\1\53\1\31\1\26\1\57\1\5\1\45"+
    "\1\6\1\57\6\0\1\47\242\0\2\47\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\10\13\1\16"+
    "\1\17\1\1\1\20\1\21\1\22\2\0\1\21\2\13"+
    "\1\23\2\0\2\13\1\21\4\13\1\24\1\13\1\0"+
    "\2\21\5\13\1\0\1\13\2\0\1\20\1\0\1\21"+
    "\3\0\1\21\1\13\1\0\1\13\1\0\1\17\15\25"+
    "\3\13\1\21\7\13\2\21\2\0\6\13\1\0\1\21"+
    "\1\0\2\21\1\0\1\21\1\0\1\21\1\13\1\17"+
    "\13\0\1\13\1\21\1\13\1\21\1\13\3\21\1\0"+
    "\1\21\1\26\5\13\2\21\10\0\1\21\1\17\10\0"+
    "\1\21\2\13\1\27\2\13\1\21\4\13\1\30\4\21"+
    "\14\0\1\31\3\13\1\32\1\21\5\0\4\13\1\0"+
    "\4\13\1\0\6\13\1\33\5\13\1\34\1\13\1\35"+
    "\1\36";

  private static int [] zzUnpackAction() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd"+
    "\0\u0330\0\u0363\0\u0396\0\63\0\u03c9\0\u03fc\0\u042f\0\u0462"+
    "\0\u0495\0\231\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594\0\u05c7"+
    "\0\u05fa\0\u062d\0\u0660\0\231\0\u0693\0\u06c6\0\u06f9\0\63"+
    "\0\u072c\0\u075f\0\u0792\0\u07c5\0\u07f8\0\u0330\0\63\0\u082b"+
    "\0\u085e\0\63\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990"+
    "\0\u09c3\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\63\0\u0ac2\0\u0af5"+
    "\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a\0\u0fbd"+
    "\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u10bc\0\u10ef\0\u0330\0\u1122"+
    "\0\u1155\0\u1188\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u13ec\0\u141f\0\u1452"+
    "\0\u1485\0\u14b8\0\u14eb\0\u151e\0\u0bc1\0\u1551\0\u1584\0\u15b7"+
    "\0\u15ea\0\u161d\0\u1650\0\u1683\0\u16b6\0\u16e9\0\u171c\0\231"+
    "\0\u174f\0\u1782\0\u17b5\0\u17e8\0\u181b\0\u184e\0\u1881\0\u18b4"+
    "\0\u18e7\0\u191a\0\u194d\0\u1980\0\u19b3\0\u19e6\0\u1a19\0\u1a4c"+
    "\0\63\0\u1a7f\0\u1ab2\0\u1ae5\0\u1b18\0\u1b4b\0\u1b7e\0\u1bb1"+
    "\0\u1be4\0\u1c17\0\u1c4a\0\u1c7d\0\231\0\u1cb0\0\u1ce3\0\u1d16"+
    "\0\u1d49\0\u1d7c\0\u1daf\0\u1de2\0\231\0\u1e15\0\u18b4\0\u18e7"+
    "\0\u1e48\0\u1e7b\0\u1eae\0\u1ee1\0\u1f14\0\u1f47\0\u1f7a\0\u1fad"+
    "\0\u1fe0\0\u2013\0\u2046\0\u2079\0\u20ac\0\u20df\0\u2112\0\u2145"+
    "\0\u2178\0\231\0\u21ab\0\u21de\0\u0b8e\0\u2211\0\u2244\0\u2277"+
    "\0\u22aa\0\u22dd\0\u2310\0\u2343\0\u2376\0\u23a9\0\u23dc\0\u240f"+
    "\0\u2442\0\u2475\0\u24a8\0\u24db\0\u250e\0\u2541\0\u2574\0\u25a7"+
    "\0\231\0\u25da\0\u260d\0\u2640\0\u2673\0\u26a6\0\231\0\u26d9"+
    "\0\231\0\231";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\14"+
    "\1\21\1\14\1\22\1\20\1\23\1\24\2\14\1\20"+
    "\1\14\1\25\1\14\1\20\1\14\1\26\3\14\1\27"+
    "\1\30\1\27\1\31\2\2\1\27\4\14\1\32\1\23"+
    "\2\14\1\27\1\33\75\0\1\34\62\0\2\14\1\35"+
    "\25\14\7\0\4\14\1\0\3\14\1\0\1\14\13\0"+
    "\1\36\1\0\2\37\3\0\2\37\4\0\1\37\3\0"+
    "\1\37\25\0\1\37\15\14\1\40\1\41\1\14\1\41"+
    "\2\14\1\42\3\14\1\42\1\14\1\40\5\14\1\40"+
    "\5\14\1\43\1\44\1\14\1\0\10\14\1\0\1\14"+
    "\12\0\1\45\1\46\1\47\1\20\1\50\3\14\2\20"+
    "\1\51\1\52\2\14\1\20\1\14\1\52\1\14\1\20"+
    "\5\14\7\0\4\14\1\0\1\51\1\14\1\53\1\0"+
    "\1\20\12\0\1\45\1\46\1\47\2\20\3\14\2\20"+
    "\1\51\1\52\2\14\1\20\1\14\1\52\1\14\1\20"+
    "\5\14\7\0\4\14\1\0\1\51\1\14\1\53\1\0"+
    "\1\20\12\0\2\14\1\35\6\14\1\54\16\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\14\12\0\1\45\1\46"+
    "\1\47\1\20\1\55\3\14\2\20\1\51\1\52\2\14"+
    "\1\20\1\14\1\52\1\14\1\20\5\14\7\0\4\14"+
    "\1\0\1\51\1\14\1\53\1\0\1\20\13\0\1\56"+
    "\1\0\2\57\1\0\1\60\1\0\2\57\4\0\1\57"+
    "\3\0\1\57\25\0\1\57\12\0\2\14\1\35\1\14"+
    "\1\61\7\14\1\62\13\14\7\0\4\14\1\0\3\14"+
    "\1\0\1\14\12\0\2\14\1\35\1\14\1\63\11\14"+
    "\1\64\11\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\20\14\1\65\4\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\42\0\1\27\1\0\1\27"+
    "\3\0\1\27\10\0\1\27\1\0\44\30\1\0\16\30"+
    "\45\66\1\67\1\70\14\66\46\32\1\71\6\32\1\72"+
    "\5\32\12\0\1\73\1\37\1\74\2\33\3\0\2\33"+
    "\1\75\1\76\2\0\1\33\1\0\1\76\1\0\1\33"+
    "\21\0\1\75\1\0\1\77\1\0\1\33\45\14\2\0"+
    "\1\14\1\0\10\14\1\0\1\14\13\0\1\67\61\0"+
    "\1\73\1\0\1\100\2\37\3\0\2\37\1\75\1\76"+
    "\2\0\1\37\1\0\1\76\1\0\1\37\21\0\1\75"+
    "\3\0\1\37\12\0\1\14\1\101\1\102\2\20\3\14"+
    "\2\20\1\103\3\14\1\20\3\14\1\20\5\14\7\0"+
    "\4\14\1\0\1\103\2\14\1\0\1\20\12\0\1\14"+
    "\1\101\1\104\2\20\3\14\2\20\1\103\3\14\1\20"+
    "\3\14\1\20\5\14\7\0\4\14\1\0\1\103\2\14"+
    "\1\0\1\20\14\105\1\0\46\105\15\106\1\107\1\110"+
    "\2\106\1\111\1\112\2\106\1\113\1\106\1\114\1\115"+
    "\1\116\1\117\1\120\10\106\1\0\2\106\2\0\1\106"+
    "\1\121\1\106\1\122\6\106\12\0\1\14\1\123\1\35"+
    "\2\124\3\14\2\124\1\125\3\14\1\124\3\14\1\124"+
    "\5\14\7\0\4\14\1\0\1\125\2\14\1\0\1\124"+
    "\12\0\1\45\1\14\1\126\2\46\3\14\2\46\1\51"+
    "\1\52\2\14\1\46\1\14\1\52\1\14\1\46\5\14"+
    "\7\0\4\14\1\0\1\51\2\14\1\0\1\46\12\14"+
    "\1\45\1\127\1\130\1\131\1\132\3\14\2\132\1\51"+
    "\1\52\2\14\1\131\1\14\1\52\1\14\1\131\10\14"+
    "\2\0\1\14\1\0\5\14\1\51\1\14\1\53\1\0"+
    "\1\131\12\0\1\45\1\46\1\47\2\20\1\133\2\14"+
    "\2\20\1\51\1\52\2\14\1\20\1\14\1\52\1\14"+
    "\1\20\5\14\7\0\4\14\1\0\1\51\1\14\1\53"+
    "\1\0\1\20\12\0\2\14\1\35\2\131\3\14\2\131"+
    "\4\14\1\131\3\14\1\131\5\14\7\0\4\14\1\0"+
    "\3\14\1\0\1\131\12\0\2\14\1\35\2\131\3\14"+
    "\2\131\1\51\3\14\1\131\3\14\1\131\5\14\7\0"+
    "\4\14\1\0\1\51\2\14\1\0\1\131\12\0\2\14"+
    "\1\35\2\134\3\14\2\134\4\14\1\134\3\14\1\134"+
    "\5\14\7\0\4\14\1\0\3\14\1\0\1\134\12\0"+
    "\1\45\1\46\1\47\2\20\3\14\1\20\1\135\1\51"+
    "\1\52\2\14\1\20\1\14\1\52\1\14\1\20\5\14"+
    "\7\0\4\14\1\0\1\51\1\14\1\53\1\0\1\20"+
    "\15\0\2\136\3\0\2\136\4\0\1\136\3\0\1\136"+
    "\25\0\1\136\12\0\1\73\1\136\1\137\2\57\1\0"+
    "\1\60\1\0\2\57\1\75\1\140\2\0\1\57\1\0"+
    "\1\140\1\0\1\57\21\0\1\75\1\0\1\141\1\0"+
    "\1\57\12\0\2\14\1\35\12\14\1\142\12\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\14\12\0\2\14\1\35"+
    "\4\14\1\143\20\14\7\0\4\14\1\0\3\14\1\0"+
    "\1\14\12\0\2\14\1\35\12\14\1\144\12\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\14\12\0\2\14\1\35"+
    "\23\14\1\145\1\14\7\0\4\14\1\0\3\14\1\0"+
    "\1\14\12\0\2\14\1\35\22\14\1\146\2\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\14\45\66\1\147\1\70"+
    "\14\66\44\32\1\0\2\32\2\0\12\32\13\0\1\150"+
    "\1\0\2\151\3\0\2\151\1\152\3\0\1\151\3\0"+
    "\1\151\21\0\1\152\3\0\1\151\12\0\1\73\1\100"+
    "\1\74\1\153\1\154\3\0\2\154\1\75\1\76\2\0"+
    "\1\153\1\0\1\76\1\0\1\153\21\0\1\75\1\0"+
    "\1\77\1\0\1\153\13\0\1\155\1\0\2\156\1\0"+
    "\1\60\1\0\2\156\4\0\1\156\3\0\1\156\25\0"+
    "\1\156\15\0\2\153\3\0\2\153\1\157\3\0\1\153"+
    "\3\0\1\153\21\0\1\157\3\0\1\153\15\0\2\160"+
    "\3\0\2\160\4\0\1\160\3\0\1\160\25\0\1\160"+
    "\12\0\1\73\1\0\1\100\1\153\1\154\3\0\2\154"+
    "\1\75\1\76\2\0\1\153\1\0\1\76\1\0\1\153"+
    "\21\0\1\75\3\0\1\153\12\0\2\14\1\35\2\46"+
    "\3\14\2\46\4\14\1\46\3\14\1\46\5\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\46\16\14\1\161\1\14"+
    "\1\161\24\14\2\0\1\14\1\0\10\14\1\0\1\14"+
    "\12\0\1\14\1\101\1\35\2\20\3\14\2\20\4\14"+
    "\1\20\3\14\1\20\5\14\7\0\4\14\1\0\3\14"+
    "\1\0\1\20\15\14\1\161\13\14\1\161\5\14\1\161"+
    "\5\14\2\0\1\14\1\0\10\14\1\0\1\14\14\105"+
    "\1\0\30\105\1\162\15\105\30\0\1\163\57\0\1\164"+
    "\53\0\1\165\62\0\1\166\116\0\1\167\40\0\1\170"+
    "\64\0\1\171\45\0\2\116\3\0\2\116\4\0\1\116"+
    "\3\0\1\116\25\0\1\116\20\0\1\172\60\0\1\173"+
    "\74\0\1\174\61\0\1\175\45\0\2\14\1\35\2\176"+
    "\3\14\2\176\4\14\1\176\3\14\1\176\5\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\176\12\0\1\14\1\176"+
    "\1\177\2\124\3\14\2\124\4\14\1\124\3\14\1\124"+
    "\5\14\7\0\4\14\1\0\2\14\1\123\1\0\1\124"+
    "\12\0\1\14\1\123\1\35\2\124\3\14\2\124\4\14"+
    "\1\124\3\14\1\124\5\14\7\0\4\14\1\0\3\14"+
    "\1\0\1\124\12\14\1\45\1\14\1\127\1\131\1\132"+
    "\3\14\2\132\1\51\1\52\2\14\1\131\1\14\1\52"+
    "\1\14\1\131\10\14\2\0\1\14\1\0\5\14\1\51"+
    "\2\14\1\0\1\131\12\0\1\45\1\14\1\126\1\131"+
    "\1\132\3\14\2\132\1\51\1\52\2\14\1\131\1\14"+
    "\1\52\1\14\1\131\5\14\7\0\4\14\1\0\1\51"+
    "\2\14\1\0\1\131\12\0\1\45\1\127\1\47\1\131"+
    "\1\132\3\14\2\132\1\51\1\52\2\14\1\131\1\14"+
    "\1\52\1\14\1\131\5\14\7\0\4\14\1\0\1\51"+
    "\1\14\1\53\1\0\1\131\12\0\1\45\1\14\1\35"+
    "\2\131\3\14\2\131\4\14\1\131\3\14\1\131\5\14"+
    "\7\0\4\14\1\0\3\14\1\0\1\131\12\0\1\45"+
    "\1\14\1\35\2\131\3\14\2\131\1\51\3\14\1\131"+
    "\3\14\1\131\5\14\7\0\4\14\1\0\1\51\2\14"+
    "\1\0\1\131\12\0\2\14\1\35\3\14\1\200\21\14"+
    "\7\0\4\14\1\0\3\14\1\0\1\14\12\0\1\45"+
    "\1\14\1\201\2\134\3\14\2\134\4\14\1\134\3\14"+
    "\1\134\5\14\7\0\4\14\1\0\3\14\1\0\1\134"+
    "\12\0\1\45\1\46\1\47\2\20\1\14\1\202\1\14"+
    "\2\20\1\51\1\52\2\14\1\20\1\14\1\52\1\14"+
    "\1\20\5\14\7\0\4\14\1\0\1\51\1\14\1\53"+
    "\1\0\1\20\12\0\1\73\1\0\1\203\2\136\1\0"+
    "\1\60\1\0\2\136\1\75\1\140\2\0\1\136\1\0"+
    "\1\140\1\0\1\136\21\0\1\75\3\0\1\136\12\0"+
    "\1\73\1\203\1\137\1\204\1\205\1\0\1\60\1\0"+
    "\2\205\1\75\1\140\2\0\1\204\1\0\1\140\1\0"+
    "\1\204\21\0\1\75\1\0\1\141\1\0\1\204\15\0"+
    "\2\204\3\0\2\204\1\206\3\0\1\204\3\0\1\204"+
    "\21\0\1\206\3\0\1\204\15\0\2\207\3\0\2\207"+
    "\4\0\1\207\3\0\1\207\25\0\1\207\12\0\2\14"+
    "\1\35\24\14\1\210\7\0\4\14\1\0\3\14\1\0"+
    "\1\14\12\0\2\14\1\35\12\14\1\211\12\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\14\12\0\2\14\1\35"+
    "\7\14\1\212\6\14\1\213\6\14\7\0\4\14\1\0"+
    "\3\14\1\0\1\14\12\0\2\14\1\35\1\214\24\14"+
    "\7\0\4\14\1\0\3\14\1\0\1\14\12\0\2\14"+
    "\1\35\12\14\1\215\12\14\7\0\4\14\1\0\3\14"+
    "\1\0\1\14\15\0\2\216\3\0\2\216\4\0\1\216"+
    "\3\0\1\216\25\0\1\216\13\0\1\216\1\217\2\151"+
    "\3\0\2\151\1\220\1\221\2\0\1\151\1\0\1\221"+
    "\1\0\1\151\21\0\1\220\1\0\1\222\1\0\1\151"+
    "\13\0\1\150\1\0\2\151\3\0\2\151\4\0\1\151"+
    "\3\0\1\151\25\0\1\151\12\0\1\73\2\0\2\153"+
    "\3\0\2\153\1\223\3\0\1\153\3\0\1\153\21\0"+
    "\1\223\3\0\1\153\12\0\1\73\2\0\2\153\3\0"+
    "\2\153\1\75\3\0\1\153\3\0\1\153\21\0\1\75"+
    "\3\0\1\153\15\0\2\224\3\0\2\224\4\0\1\224"+
    "\3\0\1\224\25\0\1\224\12\0\1\73\1\224\1\225"+
    "\2\156\1\0\1\60\1\0\2\156\1\223\1\226\2\0"+
    "\1\156\1\0\1\226\1\0\1\156\21\0\1\223\1\0"+
    "\1\227\1\0\1\156\15\0\2\153\3\0\2\153\4\0"+
    "\1\153\3\0\1\153\25\0\1\153\12\0\1\73\1\0"+
    "\1\230\2\160\3\0\2\160\1\223\3\0\1\160\3\0"+
    "\1\160\21\0\1\223\3\0\1\160\12\0\1\14\1\101"+
    "\1\35\2\20\3\14\2\20\1\103\3\14\1\20\3\14"+
    "\1\20\5\14\7\0\4\14\1\0\1\103\2\14\1\0"+
    "\1\20\14\105\1\231\30\105\1\162\15\105\34\0\1\232"+
    "\62\0\1\106\101\0\1\233\41\0\1\234\60\0\1\235"+
    "\47\0\1\106\75\0\1\236\53\0\1\237\70\0\1\240"+
    "\52\0\1\241\55\0\2\14\1\242\2\176\3\14\2\176"+
    "\4\14\1\176\3\14\1\176\5\14\7\0\4\14\1\0"+
    "\3\14\1\0\1\176\13\14\1\243\1\244\30\14\2\0"+
    "\1\14\1\0\7\14\1\123\1\0\1\14\12\0\2\14"+
    "\1\35\4\14\1\245\20\14\7\0\4\14\1\0\3\14"+
    "\1\0\13\14\1\45\1\14\1\246\30\14\2\0\1\14"+
    "\1\0\10\14\1\0\1\14\12\0\2\14\1\35\4\14"+
    "\1\247\20\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\1\73\1\0\1\203\1\204\1\205\1\0\1\60"+
    "\1\0\2\205\1\75\1\140\2\0\1\204\1\0\1\140"+
    "\1\0\1\204\21\0\1\75\3\0\1\204\12\0\1\73"+
    "\2\0\2\204\1\0\1\60\1\0\2\204\1\223\3\0"+
    "\1\204\3\0\1\204\21\0\1\223\3\0\1\204\12\0"+
    "\1\73\2\0\2\204\1\0\1\60\1\0\2\204\1\75"+
    "\3\0\1\204\3\0\1\204\21\0\1\75\3\0\1\204"+
    "\15\0\2\204\3\0\2\204\4\0\1\204\3\0\1\204"+
    "\25\0\1\204\12\0\1\73\1\0\1\250\2\207\1\0"+
    "\1\60\1\0\2\207\1\223\3\0\1\207\3\0\1\207"+
    "\21\0\1\223\3\0\1\207\12\0\2\14\1\35\13\14"+
    "\1\251\11\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\10\14\1\252\14\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\1\14"+
    "\1\253\23\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\5\14\1\254\17\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\1\14"+
    "\1\255\23\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\14\0\1\256\2\216\3\0\2\216\1\220\1\221\2\0"+
    "\1\216\1\0\1\221\1\0\1\216\21\0\1\220\3\0"+
    "\1\216\13\0\1\256\1\217\1\257\1\260\3\0\2\260"+
    "\1\220\1\221\2\0\1\257\1\0\1\221\1\0\1\257"+
    "\21\0\1\220\1\0\1\222\1\0\1\257\15\0\2\257"+
    "\3\0\2\257\4\0\1\257\3\0\1\257\25\0\1\257"+
    "\15\0\2\257\3\0\2\257\1\220\3\0\1\257\3\0"+
    "\1\257\21\0\1\220\3\0\1\257\15\0\2\261\3\0"+
    "\2\261\4\0\1\261\3\0\1\261\25\0\1\261\13\0"+
    "\1\155\1\0\2\262\1\0\1\60\1\0\2\262\4\0"+
    "\1\262\3\0\1\262\25\0\1\262\14\0\1\263\2\224"+
    "\1\0\1\60\1\0\2\224\1\264\1\226\2\0\1\224"+
    "\1\0\1\226\1\0\1\224\21\0\1\264\3\0\1\224"+
    "\13\0\1\263\1\225\1\265\1\266\1\0\1\60\1\0"+
    "\2\266\1\264\1\226\2\0\1\265\1\0\1\226\1\0"+
    "\1\265\21\0\1\264\1\0\1\227\1\0\1\265\15\0"+
    "\2\265\3\0\2\265\1\264\3\0\1\265\3\0\1\265"+
    "\21\0\1\264\3\0\1\265\15\0\2\267\3\0\2\267"+
    "\4\0\1\267\3\0\1\267\25\0\1\267\12\0\1\73"+
    "\1\0\1\230\7\0\1\223\31\0\1\223\55\0\1\270"+
    "\43\0\1\271\46\0\1\272\100\0\1\241\61\0\1\273"+
    "\45\0\1\274\101\0\1\275\43\0\1\106\44\0\14\14"+
    "\1\243\30\14\2\0\1\14\1\0\10\14\1\0\1\14"+
    "\12\0\2\14\1\242\25\14\7\0\4\14\1\0\3\14"+
    "\1\0\1\14\12\0\1\14\1\243\1\177\25\14\7\0"+
    "\4\14\1\0\2\14\1\123\1\0\1\14\12\0\1\45"+
    "\1\14\1\201\25\14\7\0\4\14\1\0\3\14\1\0"+
    "\1\14\12\0\2\14\1\35\1\14\1\276\23\14\7\0"+
    "\4\14\1\0\3\14\1\0\1\14\12\0\1\73\1\0"+
    "\1\250\3\0\1\60\3\0\1\223\31\0\1\223\16\0"+
    "\2\14\1\35\14\14\1\277\10\14\7\0\4\14\1\0"+
    "\3\14\1\0\1\14\12\0\2\14\1\35\11\14\1\300"+
    "\13\14\7\0\4\14\1\0\3\14\1\0\1\14\12\0"+
    "\2\14\1\35\17\14\1\301\5\14\7\0\4\14\1\0"+
    "\3\14\1\0\1\14\12\0\2\14\1\35\13\14\1\302"+
    "\11\14\7\0\4\14\1\0\3\14\1\0\1\14\14\0"+
    "\1\256\1\257\1\260\3\0\2\260\1\220\1\221\2\0"+
    "\1\257\1\0\1\221\1\0\1\257\21\0\1\220\3\0"+
    "\1\257\14\0\1\303\2\261\3\0\2\261\4\0\1\261"+
    "\3\0\1\261\25\0\1\261\13\0\1\224\1\225\2\262"+
    "\1\0\1\60\1\0\2\262\1\264\1\226\2\0\1\262"+
    "\1\0\1\226\1\0\1\262\21\0\1\264\1\0\1\227"+
    "\1\0\1\262\14\0\1\263\1\265\1\266\1\0\1\60"+
    "\1\0\2\266\1\264\1\226\2\0\1\265\1\0\1\226"+
    "\1\0\1\265\21\0\1\264\3\0\1\265\15\0\2\265"+
    "\3\0\2\265\4\0\1\265\3\0\1\265\25\0\1\265"+
    "\15\0\2\265\1\0\1\60\1\0\2\265\4\0\1\265"+
    "\3\0\1\265\25\0\1\265\15\0\2\265\1\0\1\60"+
    "\1\0\2\265\1\264\3\0\1\265\3\0\1\265\21\0"+
    "\1\264\3\0\1\265\14\0\1\304\2\267\1\0\1\60"+
    "\1\0\2\267\4\0\1\267\3\0\1\267\25\0\1\267"+
    "\25\0\1\305\55\0\1\306\71\0\1\241\73\0\1\106"+
    "\45\0\1\307\72\0\1\310\41\0\2\14\1\35\7\14"+
    "\1\311\15\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\7\14\1\312\15\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\4\14"+
    "\1\313\20\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\7\14\1\314\15\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\14\0\1\303\62\0\1\304"+
    "\3\0\1\60\63\0\1\241\57\0\1\315\65\0\1\106"+
    "\53\0\2\14\1\35\10\14\1\316\14\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\16\14"+
    "\1\317\6\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\12\14\1\320\12\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\10\14"+
    "\1\321\14\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\16\0\1\322\56\0\2\14\1\35\11\14\1\323\13\14"+
    "\7\0\4\14\1\0\3\14\1\0\1\14\12\0\2\14"+
    "\1\35\20\14\1\324\4\14\7\0\4\14\1\0\3\14"+
    "\1\0\1\14\12\0\2\14\1\35\13\14\1\325\11\14"+
    "\7\0\4\14\1\0\3\14\1\0\1\14\12\0\2\14"+
    "\1\35\11\14\1\326\13\14\7\0\4\14\1\0\3\14"+
    "\1\0\1\14\22\0\1\106\52\0\2\14\1\35\4\14"+
    "\1\327\20\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\15\14\1\330\7\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\14\14"+
    "\1\331\10\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\4\14\1\332\20\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\12\14"+
    "\1\333\12\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\1\14\1\334\23\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\12\14"+
    "\1\335\12\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\13\14\1\336\11\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\10\14"+
    "\1\337\14\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\13\14\1\340\11\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14\12\0\2\14\1\35\14\14"+
    "\1\341\10\14\7\0\4\14\1\0\3\14\1\0\1\14"+
    "\12\0\2\14\1\35\14\14\1\342\10\14\7\0\4\14"+
    "\1\0\3\14\1\0\1\14";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9996];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\11\11\21\1\1\11\2\0\4\1\2\0\11\1"+
    "\1\0\1\1\1\11\5\1\1\0\1\11\2\0\1\11"+
    "\1\0\1\1\3\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\31\1\2\0\6\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\13\0\10\1\1\0\11\1"+
    "\10\0\1\1\1\11\10\0\20\1\14\0\6\1\5\0"+
    "\4\1\1\0\4\1\1\0\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[226];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SchemeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 31: break;
          case 2: 
            { return SchemeTokenTypes.OPEN_PAREN;
            }
          case 32: break;
          case 3: 
            { return SchemeTokenTypes.CLOSE_PAREN;
            }
          case 33: break;
          case 4: 
            { return SchemeTokenTypes.OPEN_BRACE;
            }
          case 34: break;
          case 5: 
            { return SchemeTokenTypes.CLOSE_BRACE;
            }
          case 35: break;
          case 6: 
            { return SchemeTokenTypes.OPEN_BRACKET;
            }
          case 36: break;
          case 7: 
            { return SchemeTokenTypes.CLOSE_BRACKET;
            }
          case 37: break;
          case 8: 
            { return SchemeTokenTypes.APOSTROPHE;
            }
          case 38: break;
          case 9: 
            { return SchemeTokenTypes.BACKQUOTE;
            }
          case 39: break;
          case 10: 
            { return SchemeTokenTypes.COMMA;
            }
          case 40: break;
          case 11: 
            { return SchemeTokenTypes.IDENTIFIER;
            }
          case 41: break;
          case 12: 
            { return SchemeTokenTypes.DOT;
            }
          case 42: break;
          case 13: 
            { return SchemeTokenTypes.POUND;
            }
          case 43: break;
          case 14: 
            { return TokenType.WHITE_SPACE;
            }
          case 44: break;
          case 15: 
            { return SchemeTokens.COMMENT;
            }
          case 45: break;
          case 16: 
            { return SchemeTokenTypes.STRING;
            }
          case 46: break;
          case 17: 
            { return SchemeTokenTypes.NUMBER;
            }
          case 47: break;
          case 18: 
            { return SchemeTokenTypes.COMMA_AT;
            }
          case 48: break;
          case 19: 
            { return SchemeTokenTypes.BOOLEAN;
            }
          case 49: break;
          case 20: 
            { return SchemeTokenTypes.IF;
            }
          case 50: break;
          case 21: 
            { return SchemeTokenTypes.CHARACTER;
            }
          case 51: break;
          case 22: 
            { return SchemeTokenTypes.SET;
            }
          case 52: break;
          case 23: 
            { return SchemeTokenTypes.BEGIN;
            }
          case 53: break;
          case 24: 
            { return SchemeTokenTypes.QUOTE;
            }
          case 54: break;
          case 25: 
            { return SchemeTokenTypes.DEFINE;
            }
          case 55: break;
          case 26: 
            { return SchemeTokenTypes.LAMBDA;
            }
          case 56: break;
          case 27: 
            { return SchemeTokenTypes.LET_SYNTAX;
            }
          case 57: break;
          case 28: 
            { return SchemeTokenTypes.SYNTAX_RULES;
            }
          case 58: break;
          case 29: 
            { return SchemeTokenTypes.DEFINE_SYNTAX;
            }
          case 59: break;
          case 30: 
            { return SchemeTokenTypes.LETREC_SYNTAX;
            }
          case 60: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
