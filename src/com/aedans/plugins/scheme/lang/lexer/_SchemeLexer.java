/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package com.aedans.plugins.scheme.lang.lexer;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.TokenType;
import com.aedans.plugins.scheme.lang.lexer.SchemeTokenTypes;
import com.aedans.plugins.scheme.lang.parser.SchemeTokens;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>_SchemeLexer.flex</tt>
 */
class _SchemeLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [9, 6, 6]
   * Total runtime size is 1568 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>12]|((ch>>6)&0x3f)]<<6)|(ch&0x3f)];
  }

  /* The ZZ_CMAP_Z table has 272 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\100\1\200\u010d\100");

  /* The ZZ_CMAP_Y table has 192 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\3\1\4\77\3");

  /* The ZZ_CMAP_A table has 320 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\55\1\40\1\43\1\44\1\40\22\0\1\36\1\35\1\51\1\10\3\53\1\3\1\1\1\2\1"+
    "\53\1\52\1\5\1\20\1\7\1\54\12\56\1\53\1\37\4\53\1\6\32\53\1\1\1\42\1\2\2\53"+
    "\1\4\1\24\1\11\1\30\1\16\1\12\1\17\1\13\1\53\1\14\1\53\1\45\1\26\1\34\1\15"+
    "\1\33\1\46\1\32\1\27\1\21\1\23\1\31\1\50\1\47\1\25\1\22\1\53\1\0\1\41\1\0"+
    "\1\53\6\0\1\43\242\0\2\43\26\0");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\10\7\1\12\1\13\1\1\1\14\1\15"+
    "\1\16\2\0\1\15\2\7\1\17\2\0\2\7\1\15"+
    "\4\7\1\20\1\7\1\0\2\15\5\7\1\0\1\7"+
    "\2\0\1\14\1\0\1\15\3\0\1\15\1\7\1\0"+
    "\1\7\1\0\1\13\15\21\3\7\1\15\7\7\2\15"+
    "\2\0\6\7\1\0\1\15\1\0\2\15\1\0\1\15"+
    "\1\0\1\15\1\7\1\13\13\0\1\7\1\15\1\7"+
    "\1\15\1\7\3\15\1\0\1\15\1\22\5\7\2\15"+
    "\10\0\1\15\1\13\10\0\1\15\2\7\1\23\2\7"+
    "\1\15\4\7\1\24\4\15\14\0\1\25\3\7\1\26"+
    "\1\15\5\0\4\7\1\0\4\7\1\0\6\7\1\27"+
    "\5\7\1\30\1\7\1\31\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\57\0\57\0\57\0\136\0\215"+
    "\0\274\0\353\0\u011a\0\u0149\0\u0178\0\u01a7\0\u01d6\0\u0205"+
    "\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0\0\u031f\0\u034e\0\57"+
    "\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439\0\215\0\u0468\0\u0497"+
    "\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\215"+
    "\0\u060f\0\u063e\0\u066d\0\57\0\u069c\0\u06cb\0\u06fa\0\u0729"+
    "\0\u0758\0\u02f0\0\57\0\u0787\0\u07b6\0\57\0\u07e5\0\u0814"+
    "\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u09bb\0\57\0\u09ea\0\u0a19\0\u0a48\0\u0a77\0\u0aa6\0\u0ad5"+
    "\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u0bc0\0\u0bef\0\u0c1e\0\u0c4d"+
    "\0\u0c7c\0\u0cab\0\u0cda\0\u0d09\0\u0d38\0\u0d67\0\u0d96\0\u0dc5"+
    "\0\u0df4\0\u0e23\0\u0e52\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0f3d"+
    "\0\u0f6c\0\u0f9b\0\u02f0\0\u0fca\0\u0ff9\0\u1028\0\u1057\0\u1086"+
    "\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171\0\u11a0\0\u11cf\0\u11fe"+
    "\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9\0\u1318\0\u1347\0\u1376"+
    "\0\u0ad5\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461\0\u1490\0\u14bf"+
    "\0\u14ee\0\u151d\0\u154c\0\215\0\u157b\0\u15aa\0\u15d9\0\u1608"+
    "\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3\0\u1722\0\u1751\0\u1780"+
    "\0\u17af\0\u17de\0\u180d\0\u183c\0\57\0\u186b\0\u189a\0\u18c9"+
    "\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3\0\u1a12\0\u1a41"+
    "\0\215\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b\0\u1b8a"+
    "\0\215\0\u1bb9\0\u16c4\0\u16f3\0\u1be8\0\u1c17\0\u1c46\0\u1c75"+
    "\0\u1ca4\0\u1cd3\0\u1d02\0\u1d31\0\u1d60\0\u1d8f\0\u1dbe\0\u1ded"+
    "\0\u1e1c\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\215\0\u1f07\0\u1f36"+
    "\0\u0aa6\0\u1f65\0\u1f94\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f"+
    "\0\u20ae\0\u20dd\0\u210c\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7"+
    "\0\u2226\0\u2255\0\u2284\0\u22b3\0\215\0\u22e2\0\u2311\0\u2340"+
    "\0\u236f\0\u239e\0\215\0\u23cd\0\215\0\215";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\10\1\15\1\10\1\16\1\14"+
    "\1\17\1\20\2\10\1\14\1\10\1\21\1\10\1\14"+
    "\1\10\1\22\3\10\1\23\1\24\1\23\1\25\2\2"+
    "\1\23\4\10\1\26\1\17\2\10\1\23\1\27\65\0"+
    "\1\30\56\0\2\10\1\31\25\10\7\0\4\10\1\0"+
    "\3\10\1\0\1\10\7\0\1\32\1\0\2\33\3\0"+
    "\2\33\4\0\1\33\3\0\1\33\25\0\1\33\11\10"+
    "\1\34\1\35\1\10\1\35\2\10\1\36\3\10\1\36"+
    "\1\10\1\34\5\10\1\34\5\10\1\37\1\40\1\10"+
    "\1\0\10\10\1\0\1\10\6\0\1\41\1\42\1\43"+
    "\1\14\1\44\3\10\2\14\1\45\1\46\2\10\1\14"+
    "\1\10\1\46\1\10\1\14\5\10\7\0\4\10\1\0"+
    "\1\45\1\10\1\47\1\0\1\14\6\0\1\41\1\42"+
    "\1\43\2\14\3\10\2\14\1\45\1\46\2\10\1\14"+
    "\1\10\1\46\1\10\1\14\5\10\7\0\4\10\1\0"+
    "\1\45\1\10\1\47\1\0\1\14\6\0\2\10\1\31"+
    "\6\10\1\50\16\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\10\6\0\1\41\1\42\1\43\1\14\1\51\3\10"+
    "\2\14\1\45\1\46\2\10\1\14\1\10\1\46\1\10"+
    "\1\14\5\10\7\0\4\10\1\0\1\45\1\10\1\47"+
    "\1\0\1\14\7\0\1\52\1\0\2\53\1\0\1\54"+
    "\1\0\2\53\4\0\1\53\3\0\1\53\25\0\1\53"+
    "\6\0\2\10\1\31\1\10\1\55\7\10\1\56\13\10"+
    "\7\0\4\10\1\0\3\10\1\0\1\10\6\0\2\10"+
    "\1\31\1\10\1\57\11\10\1\60\11\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\20\10"+
    "\1\61\4\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\36\0\1\23\1\0\1\23\3\0\1\23\10\0\1\23"+
    "\1\0\40\24\1\0\16\24\41\62\1\63\1\64\14\62"+
    "\42\26\1\65\6\26\1\66\5\26\6\0\1\67\1\33"+
    "\1\70\2\27\3\0\2\27\1\71\1\72\2\0\1\27"+
    "\1\0\1\72\1\0\1\27\21\0\1\71\1\0\1\73"+
    "\1\0\1\27\41\10\2\0\1\10\1\0\10\10\1\0"+
    "\1\10\7\0\1\63\55\0\1\67\1\0\1\74\2\33"+
    "\3\0\2\33\1\71\1\72\2\0\1\33\1\0\1\72"+
    "\1\0\1\33\21\0\1\71\3\0\1\33\6\0\1\10"+
    "\1\75\1\76\2\14\3\10\2\14\1\77\3\10\1\14"+
    "\3\10\1\14\5\10\7\0\4\10\1\0\1\77\2\10"+
    "\1\0\1\14\6\0\1\10\1\75\1\100\2\14\3\10"+
    "\2\14\1\77\3\10\1\14\3\10\1\14\5\10\7\0"+
    "\4\10\1\0\1\77\2\10\1\0\1\14\10\101\1\0"+
    "\46\101\11\102\1\103\1\104\2\102\1\105\1\106\2\102"+
    "\1\107\1\102\1\110\1\111\1\112\1\113\1\114\10\102"+
    "\1\0\2\102\2\0\1\102\1\115\1\102\1\116\6\102"+
    "\6\0\1\10\1\117\1\31\2\120\3\10\2\120\1\121"+
    "\3\10\1\120\3\10\1\120\5\10\7\0\4\10\1\0"+
    "\1\121\2\10\1\0\1\120\6\0\1\41\1\10\1\122"+
    "\2\42\3\10\2\42\1\45\1\46\2\10\1\42\1\10"+
    "\1\46\1\10\1\42\5\10\7\0\4\10\1\0\1\45"+
    "\2\10\1\0\1\42\6\10\1\41\1\123\1\124\1\125"+
    "\1\126\3\10\2\126\1\45\1\46\2\10\1\125\1\10"+
    "\1\46\1\10\1\125\10\10\2\0\1\10\1\0\5\10"+
    "\1\45\1\10\1\47\1\0\1\125\6\0\1\41\1\42"+
    "\1\43\2\14\1\127\2\10\2\14\1\45\1\46\2\10"+
    "\1\14\1\10\1\46\1\10\1\14\5\10\7\0\4\10"+
    "\1\0\1\45\1\10\1\47\1\0\1\14\6\0\2\10"+
    "\1\31\2\125\3\10\2\125\4\10\1\125\3\10\1\125"+
    "\5\10\7\0\4\10\1\0\3\10\1\0\1\125\6\0"+
    "\2\10\1\31\2\125\3\10\2\125\1\45\3\10\1\125"+
    "\3\10\1\125\5\10\7\0\4\10\1\0\1\45\2\10"+
    "\1\0\1\125\6\0\2\10\1\31\2\130\3\10\2\130"+
    "\4\10\1\130\3\10\1\130\5\10\7\0\4\10\1\0"+
    "\3\10\1\0\1\130\6\0\1\41\1\42\1\43\2\14"+
    "\3\10\1\14\1\131\1\45\1\46\2\10\1\14\1\10"+
    "\1\46\1\10\1\14\5\10\7\0\4\10\1\0\1\45"+
    "\1\10\1\47\1\0\1\14\11\0\2\132\3\0\2\132"+
    "\4\0\1\132\3\0\1\132\25\0\1\132\6\0\1\67"+
    "\1\132\1\133\2\53\1\0\1\54\1\0\2\53\1\71"+
    "\1\134\2\0\1\53\1\0\1\134\1\0\1\53\21\0"+
    "\1\71\1\0\1\135\1\0\1\53\6\0\2\10\1\31"+
    "\12\10\1\136\12\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\10\6\0\2\10\1\31\4\10\1\137\20\10\7\0"+
    "\4\10\1\0\3\10\1\0\1\10\6\0\2\10\1\31"+
    "\12\10\1\140\12\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\10\6\0\2\10\1\31\23\10\1\141\1\10\7\0"+
    "\4\10\1\0\3\10\1\0\1\10\6\0\2\10\1\31"+
    "\22\10\1\142\2\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\10\41\62\1\143\1\64\14\62\40\26\1\0\2\26"+
    "\2\0\12\26\7\0\1\144\1\0\2\145\3\0\2\145"+
    "\1\146\3\0\1\145\3\0\1\145\21\0\1\146\3\0"+
    "\1\145\6\0\1\67\1\74\1\70\1\147\1\150\3\0"+
    "\2\150\1\71\1\72\2\0\1\147\1\0\1\72\1\0"+
    "\1\147\21\0\1\71\1\0\1\73\1\0\1\147\7\0"+
    "\1\151\1\0\2\152\1\0\1\54\1\0\2\152\4\0"+
    "\1\152\3\0\1\152\25\0\1\152\11\0\2\147\3\0"+
    "\2\147\1\153\3\0\1\147\3\0\1\147\21\0\1\153"+
    "\3\0\1\147\11\0\2\154\3\0\2\154\4\0\1\154"+
    "\3\0\1\154\25\0\1\154\6\0\1\67\1\0\1\74"+
    "\1\147\1\150\3\0\2\150\1\71\1\72\2\0\1\147"+
    "\1\0\1\72\1\0\1\147\21\0\1\71\3\0\1\147"+
    "\6\0\2\10\1\31\2\42\3\10\2\42\4\10\1\42"+
    "\3\10\1\42\5\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\42\12\10\1\155\1\10\1\155\24\10\2\0\1\10"+
    "\1\0\10\10\1\0\1\10\6\0\1\10\1\75\1\31"+
    "\2\14\3\10\2\14\4\10\1\14\3\10\1\14\5\10"+
    "\7\0\4\10\1\0\3\10\1\0\1\14\11\10\1\155"+
    "\13\10\1\155\5\10\1\155\5\10\2\0\1\10\1\0"+
    "\10\10\1\0\1\10\10\101\1\0\30\101\1\156\15\101"+
    "\24\0\1\157\53\0\1\160\47\0\1\161\56\0\1\162"+
    "\112\0\1\163\34\0\1\164\60\0\1\165\41\0\2\112"+
    "\3\0\2\112\4\0\1\112\3\0\1\112\25\0\1\112"+
    "\14\0\1\166\54\0\1\167\70\0\1\170\55\0\1\171"+
    "\41\0\2\10\1\31\2\172\3\10\2\172\4\10\1\172"+
    "\3\10\1\172\5\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\172\6\0\1\10\1\172\1\173\2\120\3\10\2\120"+
    "\4\10\1\120\3\10\1\120\5\10\7\0\4\10\1\0"+
    "\2\10\1\117\1\0\1\120\6\0\1\10\1\117\1\31"+
    "\2\120\3\10\2\120\4\10\1\120\3\10\1\120\5\10"+
    "\7\0\4\10\1\0\3\10\1\0\1\120\6\10\1\41"+
    "\1\10\1\123\1\125\1\126\3\10\2\126\1\45\1\46"+
    "\2\10\1\125\1\10\1\46\1\10\1\125\10\10\2\0"+
    "\1\10\1\0\5\10\1\45\2\10\1\0\1\125\6\0"+
    "\1\41\1\10\1\122\1\125\1\126\3\10\2\126\1\45"+
    "\1\46\2\10\1\125\1\10\1\46\1\10\1\125\5\10"+
    "\7\0\4\10\1\0\1\45\2\10\1\0\1\125\6\0"+
    "\1\41\1\123\1\43\1\125\1\126\3\10\2\126\1\45"+
    "\1\46\2\10\1\125\1\10\1\46\1\10\1\125\5\10"+
    "\7\0\4\10\1\0\1\45\1\10\1\47\1\0\1\125"+
    "\6\0\1\41\1\10\1\31\2\125\3\10\2\125\4\10"+
    "\1\125\3\10\1\125\5\10\7\0\4\10\1\0\3\10"+
    "\1\0\1\125\6\0\1\41\1\10\1\31\2\125\3\10"+
    "\2\125\1\45\3\10\1\125\3\10\1\125\5\10\7\0"+
    "\4\10\1\0\1\45\2\10\1\0\1\125\6\0\2\10"+
    "\1\31\3\10\1\174\21\10\7\0\4\10\1\0\3\10"+
    "\1\0\1\10\6\0\1\41\1\10\1\175\2\130\3\10"+
    "\2\130\4\10\1\130\3\10\1\130\5\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\130\6\0\1\41\1\42\1\43"+
    "\2\14\1\10\1\176\1\10\2\14\1\45\1\46\2\10"+
    "\1\14\1\10\1\46\1\10\1\14\5\10\7\0\4\10"+
    "\1\0\1\45\1\10\1\47\1\0\1\14\6\0\1\67"+
    "\1\0\1\177\2\132\1\0\1\54\1\0\2\132\1\71"+
    "\1\134\2\0\1\132\1\0\1\134\1\0\1\132\21\0"+
    "\1\71\3\0\1\132\6\0\1\67\1\177\1\133\1\200"+
    "\1\201\1\0\1\54\1\0\2\201\1\71\1\134\2\0"+
    "\1\200\1\0\1\134\1\0\1\200\21\0\1\71\1\0"+
    "\1\135\1\0\1\200\11\0\2\200\3\0\2\200\1\202"+
    "\3\0\1\200\3\0\1\200\21\0\1\202\3\0\1\200"+
    "\11\0\2\203\3\0\2\203\4\0\1\203\3\0\1\203"+
    "\25\0\1\203\6\0\2\10\1\31\24\10\1\204\7\0"+
    "\4\10\1\0\3\10\1\0\1\10\6\0\2\10\1\31"+
    "\12\10\1\205\12\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\10\6\0\2\10\1\31\7\10\1\206\6\10\1\207"+
    "\6\10\7\0\4\10\1\0\3\10\1\0\1\10\6\0"+
    "\2\10\1\31\1\210\24\10\7\0\4\10\1\0\3\10"+
    "\1\0\1\10\6\0\2\10\1\31\12\10\1\211\12\10"+
    "\7\0\4\10\1\0\3\10\1\0\1\10\11\0\2\212"+
    "\3\0\2\212\4\0\1\212\3\0\1\212\25\0\1\212"+
    "\7\0\1\212\1\213\2\145\3\0\2\145\1\214\1\215"+
    "\2\0\1\145\1\0\1\215\1\0\1\145\21\0\1\214"+
    "\1\0\1\216\1\0\1\145\7\0\1\144\1\0\2\145"+
    "\3\0\2\145\4\0\1\145\3\0\1\145\25\0\1\145"+
    "\6\0\1\67\2\0\2\147\3\0\2\147\1\217\3\0"+
    "\1\147\3\0\1\147\21\0\1\217\3\0\1\147\6\0"+
    "\1\67\2\0\2\147\3\0\2\147\1\71\3\0\1\147"+
    "\3\0\1\147\21\0\1\71\3\0\1\147\11\0\2\220"+
    "\3\0\2\220\4\0\1\220\3\0\1\220\25\0\1\220"+
    "\6\0\1\67\1\220\1\221\2\152\1\0\1\54\1\0"+
    "\2\152\1\217\1\222\2\0\1\152\1\0\1\222\1\0"+
    "\1\152\21\0\1\217\1\0\1\223\1\0\1\152\11\0"+
    "\2\147\3\0\2\147\4\0\1\147\3\0\1\147\25\0"+
    "\1\147\6\0\1\67\1\0\1\224\2\154\3\0\2\154"+
    "\1\217\3\0\1\154\3\0\1\154\21\0\1\217\3\0"+
    "\1\154\6\0\1\10\1\75\1\31\2\14\3\10\2\14"+
    "\1\77\3\10\1\14\3\10\1\14\5\10\7\0\4\10"+
    "\1\0\1\77\2\10\1\0\1\14\10\101\1\225\30\101"+
    "\1\156\15\101\30\0\1\226\56\0\1\102\75\0\1\227"+
    "\35\0\1\230\54\0\1\231\43\0\1\102\71\0\1\232"+
    "\47\0\1\233\64\0\1\234\46\0\1\235\51\0\2\10"+
    "\1\236\2\172\3\10\2\172\4\10\1\172\3\10\1\172"+
    "\5\10\7\0\4\10\1\0\3\10\1\0\1\172\7\10"+
    "\1\237\1\240\30\10\2\0\1\10\1\0\7\10\1\117"+
    "\1\0\1\10\6\0\2\10\1\31\4\10\1\241\20\10"+
    "\7\0\4\10\1\0\3\10\1\0\7\10\1\41\1\10"+
    "\1\242\30\10\2\0\1\10\1\0\10\10\1\0\1\10"+
    "\6\0\2\10\1\31\4\10\1\243\20\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\1\67\1\0\1\177"+
    "\1\200\1\201\1\0\1\54\1\0\2\201\1\71\1\134"+
    "\2\0\1\200\1\0\1\134\1\0\1\200\21\0\1\71"+
    "\3\0\1\200\6\0\1\67\2\0\2\200\1\0\1\54"+
    "\1\0\2\200\1\217\3\0\1\200\3\0\1\200\21\0"+
    "\1\217\3\0\1\200\6\0\1\67\2\0\2\200\1\0"+
    "\1\54\1\0\2\200\1\71\3\0\1\200\3\0\1\200"+
    "\21\0\1\71\3\0\1\200\11\0\2\200\3\0\2\200"+
    "\4\0\1\200\3\0\1\200\25\0\1\200\6\0\1\67"+
    "\1\0\1\244\2\203\1\0\1\54\1\0\2\203\1\217"+
    "\3\0\1\203\3\0\1\203\21\0\1\217\3\0\1\203"+
    "\6\0\2\10\1\31\13\10\1\245\11\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\10\10"+
    "\1\246\14\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\1\10\1\247\23\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\5\10"+
    "\1\250\17\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\1\10\1\251\23\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\10\0\1\252\2\212\3\0"+
    "\2\212\1\214\1\215\2\0\1\212\1\0\1\215\1\0"+
    "\1\212\21\0\1\214\3\0\1\212\7\0\1\252\1\213"+
    "\1\253\1\254\3\0\2\254\1\214\1\215\2\0\1\253"+
    "\1\0\1\215\1\0\1\253\21\0\1\214\1\0\1\216"+
    "\1\0\1\253\11\0\2\253\3\0\2\253\4\0\1\253"+
    "\3\0\1\253\25\0\1\253\11\0\2\253\3\0\2\253"+
    "\1\214\3\0\1\253\3\0\1\253\21\0\1\214\3\0"+
    "\1\253\11\0\2\255\3\0\2\255\4\0\1\255\3\0"+
    "\1\255\25\0\1\255\7\0\1\151\1\0\2\256\1\0"+
    "\1\54\1\0\2\256\4\0\1\256\3\0\1\256\25\0"+
    "\1\256\10\0\1\257\2\220\1\0\1\54\1\0\2\220"+
    "\1\260\1\222\2\0\1\220\1\0\1\222\1\0\1\220"+
    "\21\0\1\260\3\0\1\220\7\0\1\257\1\221\1\261"+
    "\1\262\1\0\1\54\1\0\2\262\1\260\1\222\2\0"+
    "\1\261\1\0\1\222\1\0\1\261\21\0\1\260\1\0"+
    "\1\223\1\0\1\261\11\0\2\261\3\0\2\261\1\260"+
    "\3\0\1\261\3\0\1\261\21\0\1\260\3\0\1\261"+
    "\11\0\2\263\3\0\2\263\4\0\1\263\3\0\1\263"+
    "\25\0\1\263\6\0\1\67\1\0\1\224\7\0\1\217"+
    "\31\0\1\217\51\0\1\264\37\0\1\265\42\0\1\266"+
    "\74\0\1\235\55\0\1\267\41\0\1\270\75\0\1\271"+
    "\37\0\1\102\44\0\10\10\1\237\30\10\2\0\1\10"+
    "\1\0\10\10\1\0\1\10\6\0\2\10\1\236\25\10"+
    "\7\0\4\10\1\0\3\10\1\0\1\10\6\0\1\10"+
    "\1\237\1\173\25\10\7\0\4\10\1\0\2\10\1\117"+
    "\1\0\1\10\6\0\1\41\1\10\1\175\25\10\7\0"+
    "\4\10\1\0\3\10\1\0\1\10\6\0\2\10\1\31"+
    "\1\10\1\272\23\10\7\0\4\10\1\0\3\10\1\0"+
    "\1\10\6\0\1\67\1\0\1\244\3\0\1\54\3\0"+
    "\1\217\31\0\1\217\12\0\2\10\1\31\14\10\1\273"+
    "\10\10\7\0\4\10\1\0\3\10\1\0\1\10\6\0"+
    "\2\10\1\31\11\10\1\274\13\10\7\0\4\10\1\0"+
    "\3\10\1\0\1\10\6\0\2\10\1\31\17\10\1\275"+
    "\5\10\7\0\4\10\1\0\3\10\1\0\1\10\6\0"+
    "\2\10\1\31\13\10\1\276\11\10\7\0\4\10\1\0"+
    "\3\10\1\0\1\10\10\0\1\252\1\253\1\254\3\0"+
    "\2\254\1\214\1\215\2\0\1\253\1\0\1\215\1\0"+
    "\1\253\21\0\1\214\3\0\1\253\10\0\1\277\2\255"+
    "\3\0\2\255\4\0\1\255\3\0\1\255\25\0\1\255"+
    "\7\0\1\220\1\221\2\256\1\0\1\54\1\0\2\256"+
    "\1\260\1\222\2\0\1\256\1\0\1\222\1\0\1\256"+
    "\21\0\1\260\1\0\1\223\1\0\1\256\10\0\1\257"+
    "\1\261\1\262\1\0\1\54\1\0\2\262\1\260\1\222"+
    "\2\0\1\261\1\0\1\222\1\0\1\261\21\0\1\260"+
    "\3\0\1\261\11\0\2\261\3\0\2\261\4\0\1\261"+
    "\3\0\1\261\25\0\1\261\11\0\2\261\1\0\1\54"+
    "\1\0\2\261\4\0\1\261\3\0\1\261\25\0\1\261"+
    "\11\0\2\261\1\0\1\54\1\0\2\261\1\260\3\0"+
    "\1\261\3\0\1\261\21\0\1\260\3\0\1\261\10\0"+
    "\1\300\2\263\1\0\1\54\1\0\2\263\4\0\1\263"+
    "\3\0\1\263\25\0\1\263\21\0\1\301\51\0\1\302"+
    "\65\0\1\235\67\0\1\102\41\0\1\303\66\0\1\304"+
    "\35\0\2\10\1\31\7\10\1\305\15\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\7\10"+
    "\1\306\15\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\4\10\1\307\20\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\7\10"+
    "\1\310\15\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\10\0\1\277\56\0\1\300\3\0\1\54\57\0\1\235"+
    "\53\0\1\311\61\0\1\102\47\0\2\10\1\31\10\10"+
    "\1\312\14\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\16\10\1\313\6\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\12\10"+
    "\1\314\12\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\10\10\1\315\14\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\12\0\1\316\52\0\2\10"+
    "\1\31\11\10\1\317\13\10\7\0\4\10\1\0\3\10"+
    "\1\0\1\10\6\0\2\10\1\31\20\10\1\320\4\10"+
    "\7\0\4\10\1\0\3\10\1\0\1\10\6\0\2\10"+
    "\1\31\13\10\1\321\11\10\7\0\4\10\1\0\3\10"+
    "\1\0\1\10\6\0\2\10\1\31\11\10\1\322\13\10"+
    "\7\0\4\10\1\0\3\10\1\0\1\10\16\0\1\102"+
    "\46\0\2\10\1\31\4\10\1\323\20\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\15\10"+
    "\1\324\7\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\14\10\1\325\10\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\4\10"+
    "\1\326\20\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\12\10\1\327\12\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\1\10"+
    "\1\330\23\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\12\10\1\331\12\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\13\10"+
    "\1\332\11\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\10\10\1\333\14\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\13\10"+
    "\1\334\11\10\7\0\4\10\1\0\3\10\1\0\1\10"+
    "\6\0\2\10\1\31\14\10\1\335\10\10\7\0\4\10"+
    "\1\0\3\10\1\0\1\10\6\0\2\10\1\31\14\10"+
    "\1\336\10\10\7\0\4\10\1\0\3\10\1\0\1\10";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9212];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\5\11\21\1\1\11\2\0\4\1\2\0\11\1"+
    "\1\0\1\1\1\11\5\1\1\0\1\11\2\0\1\11"+
    "\1\0\1\1\3\0\2\1\1\0\1\1\1\0\1\1"+
    "\1\11\31\1\2\0\6\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\13\0\10\1\1\0\11\1"+
    "\10\0\1\1\1\11\10\0\20\1\14\0\6\1\5\0"+
    "\4\1\1\0\4\1\1\0\20\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[222];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  _SchemeLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 27: break;
          case 2: 
            { return SchemeTokenTypes.OPEN_PAREN;
            }
          case 28: break;
          case 3: 
            { return SchemeTokenTypes.CLOSE_PAREN;
            }
          case 29: break;
          case 4: 
            { return SchemeTokenTypes.APOSTROPHE;
            }
          case 30: break;
          case 5: 
            { return SchemeTokenTypes.BACKQUOTE;
            }
          case 31: break;
          case 6: 
            { return SchemeTokenTypes.COMMA;
            }
          case 32: break;
          case 7: 
            { return SchemeTokenTypes.IDENTIFIER;
            }
          case 33: break;
          case 8: 
            { return SchemeTokenTypes.DOT;
            }
          case 34: break;
          case 9: 
            { return SchemeTokenTypes.POUND;
            }
          case 35: break;
          case 10: 
            { return TokenType.WHITE_SPACE;
            }
          case 36: break;
          case 11: 
            { return SchemeTokens.COMMENT;
            }
          case 37: break;
          case 12: 
            { return SchemeTokenTypes.STRING;
            }
          case 38: break;
          case 13: 
            { return SchemeTokenTypes.NUMBER;
            }
          case 39: break;
          case 14: 
            { return SchemeTokenTypes.COMMA_AT;
            }
          case 40: break;
          case 15: 
            { return SchemeTokenTypes.BOOLEAN;
            }
          case 41: break;
          case 16: 
            { return SchemeTokenTypes.IF;
            }
          case 42: break;
          case 17: 
            { return SchemeTokenTypes.CHARACTER;
            }
          case 43: break;
          case 18: 
            { return SchemeTokenTypes.SET;
            }
          case 44: break;
          case 19: 
            { return SchemeTokenTypes.BEGIN;
            }
          case 45: break;
          case 20: 
            { return SchemeTokenTypes.QUOTE;
            }
          case 46: break;
          case 21: 
            { return SchemeTokenTypes.DEFINE;
            }
          case 47: break;
          case 22: 
            { return SchemeTokenTypes.LAMBDA;
            }
          case 48: break;
          case 23: 
            { return SchemeTokenTypes.LET_SYNTAX;
            }
          case 49: break;
          case 24: 
            { return SchemeTokenTypes.SYNTAX_RULES;
            }
          case 50: break;
          case 25: 
            { return SchemeTokenTypes.DEFINE_SYNTAX;
            }
          case 51: break;
          case 26: 
            { return SchemeTokenTypes.LETREC_SYNTAX;
            }
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
