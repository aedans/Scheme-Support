{
  parserClass="com.ackdevelopment.plugins.scheme.lang.parser.SchemeParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Scheme"
  psiImplClassSuffix="Impl"
  psiPackage="com.ackdevelopment.plugins.scheme.lang.psi"
  psiImplPackage="com.ackdevelopment.plugins.scheme.lang.psi.impl"

  elementTypeHolderClass="com.ackdevelopment.plugins.scheme.lang.lexer.SchemeTokenTypes"
  elementTypeClass="com.ackdevelopment.plugins.scheme.lang.lexer.SchemeElementType"
  tokenTypeClass="com.ackdevelopment.plugins.scheme.lang.lexer.SchemeTokenType"
}

simpleFile ::= form*

form ::= definition|expression

// Definitions
definition ::= variable_definition
             | syntax_definition
             | begin_definition
             | let_definition
             | letrec_definition

variable_definition ::= OPEN_PAREN DEFINE variable expression CLOSE_PAREN
                      | OPEN_PAREN DEFINE OPEN_PAREN variable variable* CLOSE_PAREN body CLOSE_PAREN
                      | OPEN_PAREN DEFINE OPEN_PAREN variable variable* DOT variable CLOSE_PAREN body CLOSE_PAREN

syntax_definition ::= OPEN_PAREN DEFINE_SYNTAX keyword expression CLOSE_PAREN

begin_definition ::= OPEN_PAREN BEGIN definition* CLOSE_PAREN

let_definition ::= OPEN_PAREN LET_SYNTAX OPEN_PAREN syntax_binding* definition* CLOSE_PAREN

letrec_definition ::= OPEN_PAREN LETREC_SYNTAX OPEN_PAREN syntax_binding* CLOSE_PAREN definition* CLOSE_PAREN

variable ::= IDENTIFIER

keyword ::= IDENTIFIER

body ::= definition* expression+

syntax_binding ::= OPEN_PAREN keyword expression CLOSE_PAREN

// Expressions
expression ::= constant
             | variable
             | quote_expression
             | lambda_expression
             | if_expression
             | set_expression
             | application
             | let_syntax_expression
             | letrec_syntax_expression
             | begin_expression
             | abbreviation
             |

quote_expression ::= OPEN_PAREN QUOTE datum CLOSE_PAREN

lambda_expression ::= OPEN_PAREN LAMBDA formals body CLOSE_PAREN

if_expression ::= OPEN_PAREN IF expression expression expression CLOSE_PAREN
                | OPEN_PAREN IF expression expression CLOSE_PAREN

set_expression ::= SET variable expression

let_syntax_expression ::= OPEN_PAREN LET_SYNTAX OPEN_PAREN syntax_binding* CLOSE_PAREN expression+ CLOSE_PAREN

letrec_syntax_expression ::= OPEN_PAREN LETREC_SYNTAX OPEN_PAREN syntax_binding* CLOSE_PAREN expression+ CLOSE_PAREN

begin_expression ::= OPEN_PAREN BEGIN expression* CLOSE_PAREN

constant ::= BOOLEAN|NUMBER|CHARACTER|STRING|nil

nil ::= OPEN_PAREN CLOSE_PAREN

formals ::= variable
          | OPEN_PAREN variable* CLOSE_PAREN
          | OPEN_PAREN variable+ DOT variable CLOSE_PAREN

application ::= OPEN_PAREN expression expression* CLOSE_PAREN

// datum
datum ::= BOOLEAN|NUMBER|CHARACTER|STRING|symbol|list|vector

symbol ::= IDENTIFIER

list ::= OPEN_PAREN datum* CLOSE_PAREN
       | OPEN_PAREN datum+ DOT datum CLOSE_PAREN
       | abbreviation

abbreviation ::= APOSTROPHE datum
               | BACKQUOTE datum
               | COMMA datum
               | COMMA_AT datum

vector ::= POUND OPEN_PAREN datum* CLOSE_PAREN
